@layout ForgotPasswordLayout
@page "/forgotpassword"
@inject IAuthServiceClient AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Aurora HRM | Forgot Password</PageTitle>
<AuthorizeView Context="CustomAuthContext">
    <Authorized>
        @{
            NavigationManager.NavigateTo("home");
        }
    </Authorized>
    <NotAuthorized>
        <div id="app">
            <div style="position:absolute; top:40vh; width:100%;">
                <div style="display:flex; gap:10px; justify-content:center; align-items:center; position:relative;top:-200px;">
                    <div class="animate__animated animate__fadeIn animate__delay">
                        <div style="text-align:center;" class="animate__animated animate__pulse animate__infinite">
                            <img src="ahrm.png" alt="Alternate Text" width="100" />
                        </div>
                        <br />
                        <br />
                        <div class="row">
                            <div style="text-align:center;">
                                <h5>Forgot Password</h5>
                                <hr />
                                <div class="row">
                                    <!--@if (alertMessageShow)
                                    {
                                        <div class="animate__animated animate__fadeIn">
                                            <div class="animate__animated animate__fadeOut animate__delay-5s">
                                                <p class="text-danger" style="padding-bottom: 4px;">@errorMessage</p>
                                            </div>
                                        </div>
                                    }-->
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                
                                <EditForm Model="fpObject" OnValidSubmit="HandlePasswordReset" Context="formContext">
                                    <DataAnnotationsValidator />
                                    <div class="row card shadow-sm" style="width: 8cm">
                                        <br />
                                        <div class="mb-3">
                                            <label for="email"><small><b>Email</b></small></label>
                                            <br />
                                            <InputText id="email" @bind-Value="fpObject.Email" type="email" class="form-control"></InputText>
                                            <ValidationMessage For="@(() =>fpObject.Email)" />
                                        </div>
                                        <br />
                                    </div>
                                    <br />
                                    <br />
                                    <div style="text-align: center;">
                                        <button type="submit" class="btn btn-primary" style="width:180px">Get reset link</button>
                                    </div>
                                    <br />
                                    <div class="row" style="text-align: center;">
                                        <a href="/"><small><i class="fa fa-arrow-left" aria-hidden="true"></i> Go back to login page</small></a>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {

    private UserForgotPassword fpObject = new UserForgotPassword();

    private string errorMessage = string.Empty;

    private bool alertMessageShow = false;

    private async Task HandlePasswordReset()
    {
        /*
        var result = await AuthService.Login(user);
        if (result.Success)
        {
            errorMessage = string.Empty;
            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("home");
        }
        else
        {
            errorMessage = result.Message;
            alertMessageShow = true;
            //removes alert message after some time
            await InvokeAsync(() => StateHasChanged());
            await Task.Delay(6000);
            alertMessageShow = false;
        }
         */
        Console.WriteLine("Working");

    }
}
